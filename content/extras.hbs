---
title: Extras
---

{{! --------------------------------------------------- }}

<h2>Extra demos</h2>

<ul>
  <li><a href="https://codepen.io/desandro/pen/chisC">Centered container</a> See <a href="https://github.com/metafizzy/packery/issues/8#issuecomment-16780631">Issue #8</a></li>
  <li><a href="https://codepen.io/desandro/pen/mjcGq">Appending items, making them draggable</a> (for infinite scroll). See <a href="https://github.com/metafizzy/packery/issues/50">Issue #50</a></li>
  <li><a href="https://codepen.io/desandro/pen/shleG">Show empty spaces via canvas</li>
  <li><a href="https://codepen.io/desandro/pen/tjFKl">Ignore item element</a></li>
  <li><a href="https://codepen.io/desandro/pen/WxjJJW/">Fit item in previous position</a></li>
  <li><a href="https://codepen.io/desandro/pen/vKjAPE/">Disable &amp; enable drag, with Draggabilly</a> or <a href="https://codepen.io/desandro/pen/PzZaAG/">with vanilla JS</a></li>
</ul>

{{! --------------------------------------------------- }}

<h2>Module loaders</h2>

{{! --------------------------------------------------- }}

<h3>RequireJS</h3>

<p>Packery supports <a href="https://requirejs.org">RequireJS</a>.</p>

<p>You can require <a href="{{sourceUrlPath}}packery.pkgd.js">packery.pkgd.js</a>.</p>

``` js
requirejs( [
  'path/to/packery.pkgd.js',
], function( Packery ) {
  new Packery( '.grid', {...});
});
```

<p id="requirejs-pkgd-jquery">To use Packery as a jQuery plugin with RequireJS and packery.pkgd.js, you need to use jQuery Bridget.</p>


``` js
// require the require function
requirejs( [ 'require', 'jquery', 'path/to/packery.pkgd.js' ],
  function( require, $, Packery ) {
    // require jquery-bridget, it's included in packery.pkgd.js
    require( [ 'jquery-bridget/jquery-bridget' ],
    function( jQueryBridget ) {
      // make Packery a jQuery plugin
      jQueryBridget( 'packery', Packery, $ );
      // now you can use $().packery()
      $('.grid').packery({...});
    }
  );
});
```

<p id="requirejs-bower">Or, you can manage dependencies with <a href="https://bower.io">Bower</a>. Set <a href="https://requirejs.org/docs/api.html#config-baseUrl">baseUrl</a> to <code>bower_components</code> and set a path config for all your application code.</p>

``` js
requirejs.config({
  baseUrl: 'bower_components/',
  paths: {
    app: '../'
  }
});

requirejs( [
  'packery/js/packery',
  'app/my-component.js'
], function( Packery, myComp ) {
  new Packery( '.grid', {...});
});
```

<p id="requirejs-bower-jquery">You can require Bower dependencies and use Packery as a jQuery plugin with jQuery Bridget.</p>

``` js
requirejs.config({
  baseUrl: '../bower_components',
  paths: {
    jquery: 'jquery/dist/jquery'
  }
});

requirejs( [
    'jquery',
    'packery/js/packery',
    'jquery-bridget/jquery-bridget'
  ],
  function( $, Packery, jQueryBridget ) {
    // make Packery a jQuery plugin
    jQueryBridget( 'packery', Packery, $ );
    // now you can use $().packery()
    $('.grid').packery({...});
});
```

{{! --------------------------------------------------- }}

<h3>Browserify</h3>

<p>Packery works with <a href="http://browserify.org">Browserify</a>. <a href="https://www.npmjs.org/package/packery">Install Packery with npm</a>.</p>

```
npm install packery
```

``` js
var Packery = require('packery');

var pckry = new Packery( '.grid', {
  // options...
});
```

<p id="browserify-jquery">To use Packery as a jQuery plugin with Browserify, you need to use <a href="https://www.npmjs.org/package/jquery-bridget">jQuery Bridget</a></p>

```
npm install jquery
npm install jquery-bridget
```

``` js
var $ = require('jquery');
var jQueryBridget = require('jquery-bridget');
var Packery = require('packery');
// make Packery a jQuery plugin
jQueryBridget( 'packery', Packery, $ );
// now you can use $().packery()
$('.grid').packery({
  columnWidth: 80
});
```

{{! ----------------------------------------------------------------- }}

<h3>Webpack</h3>

<p>Install Packery with npm.</p>

``` bash
npm install packery
```

<p>You can then <code>require(<span class="string">'packery'</span>)</code>.</p>

``` js
// main.js
var Packery = require('packery');

var pckry = new Packery( '.grid', {
  // options...
});
```

<p>Run webpack.</p>


``` bash
webpack main.js bundle.js
```

<p>jQuery plugin functionality needs to be installed separately, similar to <a href="#browserify">using Browserify</a>.</p>

``` bash
npm install jquery-bridget
```

``` js
var $ = require('jquery');
var jQBridget = require('jquery-bridget');
var Packery = require('packery');
// make Packery a jQuery plugin
$.bridget( 'packery', Packery, $ );
// now you can use $().packery()
$('.grid').packery({
  columnWidth: 80
});
```

{{! --------------------------------------------------- }}

<h2>Bootstrap</h2>

<p>You can use Packery layouts with <a href="https://getbootstrap.com/docs/3.4/css/#grid">Bootstrap v3 grid system</a>. This example will display a fluid grid of 3 columns, using <code>col-xs-4</code> as <code>columnWidth</code>. <code>columnWidth</code> is not required for this layout, but <a href="draggable.html#grid-drop-positions">may be helpful if the layout is draggable</a>.</p>

<div class="example">
  <div class="example__code">
    ``` html
    <div class="container-fluid">
      <!-- add extra container element for Packery -->
      <div class="grid">
        <!-- add sizing element for columnWidth -->
        <div class="grid-sizer col-xs-4"></div>
        <!-- items use Bootstrap .col- classes -->
        <div class="grid-item col-xs-8">
          <!-- wrap item content in its own element -->
          <div class="grid-item-content">...</div>
        </div>
        <div class="grid-item col-xs-4">
          <div class="grid-item-content">...</div>
        </div>
        ...
      </div>
    </div>
    ```

    ``` js
    $('.grid').packery({
      // use a separate class for itemSelector, other than .col-
      itemSelector: '.grid-item', 
      columnWidth: '.grid-sizer',
      percentPosition: true
    });
    ```
  </div>
  {{> bootstrap }}
</div>

<p>Use multiple <code>.col-</code> classes on item elements to use Bootstrap&rsquo;s grid media queries to responsively change column sizes. This example will use 2, then 3, then 4 columns at different screen sizes.</p>

<div class="example">
  <div class="example__code">
    ``` html
    <div class="container-fluid">
      <div class="grid">
        <!-- 2 col grid @ xs, 3 col grid @ sm, 4 col grid @ md -->
        <div class="grid-sizer col-xs-6 col-sm-4 col-md-3"></div>
        <!-- 1 col @ xs, 2 col @ sm, 2 col @ md -->
        <div class="grid-item col-xs-6 col-sm-8 col-md-6">
          <div class="grid-item-content">...</div>
        </div>
        <!-- 1 col @ xs, 1 col @ sm, 1 col @ md -->
        <div class="grid-item col-xs-6 col-sm-4 col-md-3">
          <div class="grid-item-content">...</div>
        </div>
        ...
      </div>
    </div>
    ```
  </div>
  {{> bootstrap-mq }}
</div>

{{! ----------------------------------------------------------------- }}

<h2>Animating item size</h2>

<p>You cannot transition or animate the size of an item element <em>and</em> properly lay out. But there is a trick &mdash; you can animate a child element of the item element.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` html
    <div class="grid">
      <!-- items have grid-item-content child elements -->
      <div class="grid-item">
        <div class="grid-item-content"></div>
      </div>
      ...
    ```

    ``` css
    /* item is invisible, but used for layout
    item-content is visible, and transitions size */
    .grid-item,
    .grid-item-content {
      width: 60px;
      height: 60px;
    }
    .grid-item-content {
      background: #C09;
      transition: width 0.4s, height 0.4s;
    }

    /* both item and item content change size */
    .grid-item.is-expanded,
    .grid-item.is-expanded .grid-item-content {
      width: 180px;
      height: 120px;
    }
    ```
  </div>
  {{> animate-item-size}}
</div>

<p>This technique works on items with responsive, percentage widths. Although, it does require a bit more JS. <a href="https://codepen.io/desandro/pen/jGJKL">Check out the example on CodePen</a> to see how it&rsquo;s done.</p>

<div class="duo example">
  <div class="duo__cell example__code">
    ``` css
    .grid-item {
      width: 20%;
      height: 60px;
    }

    .grid-item-content {
      width: 100%;
      height: 100%;
      background: #C09;
      transition: width 0.4s, height 0.4s;
    }
    /* item has expanded size */
    .grid-item.is-expanded {
      width: 60%;
      height: 120px;
    }
    ```
  </div>
  {{> animate-item-size-responsive}}

</div>

{{! --------------------------------------------------- }}

<h2>Web fonts</h2>

<p>Like images, unloaded web fonts can throw off Packery. To resolve this, trigger <a href="methods.html#layout"><code>layout</code></a> after fonts have been loaded. Both Typekit and Google WebFont Loader provide font events to control scripts based on how fonts are loaded.</p>

<ul>
  <li><a href="https://blog.typekit.com/2010/10/18/more-control-with-typekits-font-events/">Typekit font events</a></li>
  <li><a href="https://developers.google.com/webfonts/docs/webfont_loader#Events">Google WebFont Loader: Events</a></li>
</ul>

<h3>Typekit</h3>

<p>Try the script below when using Packery on a page with Typekit. This will trigger Packery when the document is ready and again when fonts have loaded. Be sure to remove Typekitâ€™s default script, <code>try{Typekit.load();}catch(e){}</code>.</p>

``` js
var pckry;

function triggerPackery() {
  // don't proceed if packery has not been initialized
  if ( !pckry ) {
    return;
  }
  pckry.layout();
}
// initialize packery on document ready
docReady( function() {
  var container = document.querySelector('.grid');
  pckry = new Packery( container, {
    // options...
  });
});
// trigger packery when fonts have loaded
Typekit.load({
  active: triggerPackery,
  inactive: triggerPackery
});
```

``` js
// or with jQuery
var $grid;

function triggerPackery() {
  // don't proceed if $grid has not been selected
  if ( !$grid ) {
    return;
  }
  // init Packery
  $grid.packery({
    // options...
  });
}
// trigger packery on document ready
$(function(){
  $grid = $('.grid');
  triggerPackery();
});
// trigger packery when fonts have loaded
Typekit.load({
  active: triggerPackery,
  inactive: triggerPackery
});
```

{{! ----------------------------------------------------------------- }}

<h2>Issues</h2>

<h3>Reduced test cases</h3>

<p>Creating a reduced test case is the best way to debug problems and report issues. Read <a href="https://css-tricks.com/reduced-test-cases/">CSS Tricks</a> on why they&rsquo;re so great.</p>

<p>Create a reduced test case for Packery by forking any one of the <a href="https://codepen.io/desandro/pens/tags/?grid_type=list&selected_tag=packery-docs">CodePen demos</a> from these docs.</p>

<ul>
  <li>A reduced test case clearly demonstrates the bug or issue.</li>
  <li>It contains the bare minimum HTML, CSS, and JavaScript required to demonstrate the bug.</li>
  <li>A link to your production site is <b>not</b> a reduced test case.</li>
</ul>

<p>Creating a reduced test case is the best way to get your issue addressed. They help you point out the problem. They help us debug the problem. They help others understand the problem.</p>

{{! ----------------------------------------------------------------- }}

<h3>Submitting issues</h3>

<p>Report <a href="https://github.com/metafizzy/packery/issues/">issues on GitHub</a>. Make sure to include a <strong>reduced test case</strong>. Without a reduced test case, your issue may be closed.</p>

{{! --------------------------------------------------- }}

<h2>Browser support</h2>

<p>Packery v2 supports IE10+, Android 4+, Safari for iOS 5+, Firefox 16+, and Chrome 12+.</p>

<p>For IE8+ and Android 2.3 support, try <a href="https://packery.metafizzy.co/v1">Packery v1</a>.</p>

{{! --------------------------------------------------- }}

<h2>Upgrading from v1</h2>

<p>Packery v2 dropped browser support for IE8, IE9, and Android 2.3. All options, methods, and code for Packery v1 is backwards compatibile with Packery v2.</p>

<ul>
  <li><code>isOptionName</code> options renamed to <code>optionName</code>. Packery v2 is backwards compatible with the old <code>isOptionName</code> options.
    <ul>
      <li><a href="options.html#horizontal"><code>isHorizontal</code> &rarr; <code>horizontal</code></a></li>
      <li><a href="options.html#originleft"><code>isOriginLeft</code> &rarr; <code>originLeft</code></a></li>
      <li><a href="options.html#origintop"><code>isOriginTop</code> &rarr; <code>originTop</code></a></li>
      <li><a href="options.html#resize"><code>isResizeBound</code> &rarr; <code>resize</code></a></li>
      <li><a href="options.html#initlayout"><code>isInitLayout</code> &rarr; <code>initLayout</code></a></li>
    </ul>
  </li>
  <li><a href=".#initialize-in-html">HTML initialization</a> can be done with <code>data-packery</code>.  Packery v2 is backwards compatible with previous code: <code>js-packery</code> class and <code>data-packery-options</code>  attribute.</li>
  <li>IE8 helper dependencies removed: eventie, get-style-property, doc-ready</li>
  <li><code>jquery-bridget/jquery.bridget</code> path renamed to <code>jquery-bridget/jquery-bridget</code></li>
</ul>

{{! --------------------------------------------------- }}

<h2>FAQ</h2>

{{! --------------------------------------------------- }}

<h3>How do I fix overlapping item elements?</h3>

<p>You need to initialize or <a href="methods.html#layout-packery">trigger `layout/.packery()`</a> after all the items have their proper size. If your elements have images, use <a href="layout.html#imagesloaded">imagesLoaded</a>. See also <a href="#web-fonts">Web fonts</a>.</p>

{{! --------------------------------------------------- }}

<h3>What is the difference between Isotope, Masonry, and Packery?</h3>

<p><a href="https://isotope.metafizzy.co">Isotope</a>, <a href="https://masonry.desandro.com">Masonry</a>, and Packery are all similar in that they are layout libraries. Many of their options and methods are the same.</p>

<p>Masonry and Packery have different layout algorithms. Both can achieve &ldquo;masonry&rdquo;, but Packery uses a bin-packing algorithm which fills in gaps and allows for <a href="draggable.html">layouts to be draggable</a>.</p>

<p>Isotope does sorting and filtering. Isotope uses <a href="https://isotope.metafizzy.co/layout-modes/masonry.html">masonry</a> and <a href="https://isotope.metafizzy.co/layout-modes/packery.html">packery</a> layouts, as well as other layouts. </p>

<p>Masonry is licensed MIT and is freely available for use and distribution. Isotope and Packery have a proprietary license, where you can purchase a license for commercial projects, or use it freely for open-source projects.</p>

{{! --------------------------------------------------- }}
